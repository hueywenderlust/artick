{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\n// initialise cart to empty \nconst initialState = {\n  products: []\n};\nexport const cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    // add to cart\n    addToCart: (state, action) => {\n      console.log(action.payload);\n      const item = state.products.find(item => item.id === action.payload.id);\n      if (item) {\n        item.quantity += action.payload.quantity;\n      } else {\n        state.products.push(action.payload);\n      }\n    },\n    // remove item from cart\n    removeItem: (state, action) => {\n      state.products = state.products.filter(item => item.id !== action.payload);\n    },\n    // reset the cart\n    resetCart: state => {\n      state.products = [];\n    }\n  }\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  addToCart,\n  removeItem,\n  resetCart\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","products","cartSlice","name","reducers","addToCart","state","action","console","log","payload","item","find","id","quantity","push","removeItem","filter","resetCart","actions","reducer"],"sources":["/Users/hueywen/Documents/dev/work/artick/client/src/redux/cartReducer.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n// initialise cart to empty \nconst initialState = {\n  products: [],\n};\n\nexport const cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    // add to cart\n    addToCart: (state, action) => {\n      console.log(action.payload)\n      const item = state.products.find((item) => item.id === action.payload.id);\n      if (item) {\n        item.quantity += action.payload.quantity;\n      } else {\n        state.products.push(action.payload);\n      }\n    },\n    // remove item from cart\n    removeItem: (state,action) => {\n      state.products=state.products.filter(item=>item.id !== action.payload)\n    },\n\n    // reset the cart\n    resetCart: (state) => {\n      state.products = []\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { addToCart,removeItem,resetCart } = cartSlice.actions;\n\nexport default cartSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE;AACZ,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGH,WAAW,CAAC;EACnCI,IAAI,EAAE,MAAM;EACZH,YAAY;EACZI,QAAQ,EAAE;IACR;IACAC,SAAS,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC5BC,OAAO,CAACC,GAAG,CAACF,MAAM,CAACG,OAAO,CAAC;MAC3B,MAAMC,IAAI,GAAGL,KAAK,CAACL,QAAQ,CAACW,IAAI,CAAED,IAAI,IAAKA,IAAI,CAACE,EAAE,KAAKN,MAAM,CAACG,OAAO,CAACG,EAAE,CAAC;MACzE,IAAIF,IAAI,EAAE;QACRA,IAAI,CAACG,QAAQ,IAAIP,MAAM,CAACG,OAAO,CAACI,QAAQ;MAC1C,CAAC,MAAM;QACLR,KAAK,CAACL,QAAQ,CAACc,IAAI,CAACR,MAAM,CAACG,OAAO,CAAC;MACrC;IACF,CAAC;IACD;IACAM,UAAU,EAAEA,CAACV,KAAK,EAACC,MAAM,KAAK;MAC5BD,KAAK,CAACL,QAAQ,GAACK,KAAK,CAACL,QAAQ,CAACgB,MAAM,CAACN,IAAI,IAAEA,IAAI,CAACE,EAAE,KAAKN,MAAM,CAACG,OAAO,CAAC;IACxE,CAAC;IAED;IACAQ,SAAS,EAAGZ,KAAK,IAAK;MACpBA,KAAK,CAACL,QAAQ,GAAG,EAAE;IACrB;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEI,SAAS;EAACW,UAAU;EAACE;AAAU,CAAC,GAAGhB,SAAS,CAACiB,OAAO;AAEnE,eAAejB,SAAS,CAACkB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}